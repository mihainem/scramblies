{"version":3,"sources":["ui/core.cljs"],"mappings":";AAUA,0BAAA,1BAAMA,4DACHC,WAAWC;;AADd,AAEE,GAAI,EAAK,yBAAA,xBAAG,AAACC,gBAAMD,kBACV,AAACE,+BAAcH,WAAW,4CAAK,AAACI,gBAAMH;AAC7C,eAAO,8DAAA,9DAACI,6BAAkBL,WAAW,AAACI,gBAAMH;eACrC,qGAAA,rGAACI,6BAAkBJ,KAAK,4CAAK,AAACG,gBAAMH;;;;;AAC3C,0EAAA,nEAACK,6CAAE,AAACJ,gBAAMD;;;;;AAGd,yBAAA,zBAAMM,0DACHC,QAAQP;AADX,AAEE,IAAAQ,yBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAA,uFAAA,TAAwER,yDAAYP;IAApFgB,aAAA,qBAAAD,rBAAwBmB;IAAxBrB,kBAAAA;AAAA,AAAA,OAAAI,4CAAAJ,gBAAA,IAAAG;;AAAA,GAAA,CAAAF,oBAAA;AAAA,IAAAI,aAAA,CAAAL,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAAM,6CAAAN,gBAAAK;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;0EAAAP;;AAAA,AAAA,IAAAS,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAX,sBAAAC;AAAA,AAAA,GAAA,AAAAW,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAd;AAAA,AAAA,CAAAc,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAf,YAAA;AAAA,IAAAgB,uBAAAhB;AAAA,AAAA,CAAAgB,qBAAA,OAAA,AAAA1B,gBAAA,CAAAU,YAAA;;AAAAgB;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAT;;;;AAAAS;;;;;iEAAAT;;;;;0EAAAA;;;;;;;;;IAAAiB,uBAAA,iBAAAC,iBAAA,AAAApB;AAAA,AAAA,CAAAoB,eAAAC,AAAA,OAAAxB;;AAAAuB;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAAtB;AAEA,IAAAA,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAuB;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAA,uFAAA,TAAwE9B,yDAAYP;IAApFsC,aAAA,CAAA,gFAAA;IAAAC,aAAA,AAAAC;IAAAC,aAAA,CAAA,MAAAF;IAAAG,aAAA,AAAAF,uCAAAF,WAAAG;IAAAE,aAAA,0DAAAN,6DAAAK,vHAAwBY;IAAxBnB,kBAAAA;AAAA,AAAA,OAAAlB,4CAAAkB,gBAAA,IAAAQ;;AAAA,GAAA,CAAAP,oBAAA;AAAA,IAAAQ,aAAA,CAAAT,YAAA;IAAAU,aAAA,AAAA,wFAAAD;IAAAE,aAAA,qGAAAD,rGAGOU;IAHPR,aAAA,qGAAAH,rGAIOW;IAJPpB,kBAAA,iBAAAa,iBAAAb;AAAA,AAAA,CAAAa,eAAA,OAAAF;;AAAAE;;AAAA,AAAA,OAAA7B,6CAAAgB,gBAAAY;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAA5B;;AAAA,CAAA4B,eAAA,OAAA;;AAAAA;;0EAAAd;;AAAA,AAAA,IAAAb,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAX,sBAAAuB;AAAA,AAAA,GAAA,AAAAX,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAyB;AAAA,AAAA,IAAAC,uBAAAhB;AAAA,AAAA,CAAAgB,qBAAA,OAAA1B;;AAAA0B;AAAA,GAAA,AAAAvB,cAAA,CAAAO,YAAA;AAAA,IAAAiB,uBAAAjB;AAAA,AAAA,CAAAiB,qBAAA,OAAA,AAAAjD,gBAAA,CAAAgC,YAAA;;AAAAiB;AAAA,MAAA3B;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAa;;;;AAAAb;;;;;iEAAAa;;;;;0EAAAA;;;;;;;;;IAAAL,uBAAA,iBAAAuB,iBAAA,AAAA1C;AAAA,AAAA,CAAA0C,eAAArB,AAAA,OAAAxB;;AAAA6C;;AAAA,AAAA,OAAApB,2DAAAH;;;AAAAtB;;AAOF,0BAAA,1BAAMgD;AAAN,AACE,IAAMjD,UAAQ,gDAAA,hDAACkD;IACTzD,OAAK,gDAAA,hDAACyD;AADZ,AAEE;AAAA,AAAA,0FAAA,sDAAA,2CAAA,+DACqB,WAAKG;AAAL,AAAQ,AAAiBA;;AAAG,OAACC,yGAAQ,4CAAA,AAAAH,gBAAMnD;WADhE,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAmD,yBAAA,mEAAA,wBAAA,+DAAA,WAAAC,9KAGoBpD;AAHpB,AAKwB,AAAI,OAACuD,sBAAOvD,QAAQ,AAAA,AAAAoD;mBAL5C,mFAAA,wDAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAD,sBAAA,mEAAA,WAAA,pFAQoB1D,mJAEG,WAAK4D;AAAL,AAAQ,OAACE,sBAAO9D,KAAK,AAAS,AAAU4D;mBAV/D,mFAAA,wDAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,sDAAA,aAAA,6DAcsB,AAAI;AAAA,AAAO,AAACG,MAAS,4CAAK,wBAAA,AAAAL,yBAAA,AAAAA,jDAAC5D,wCAAWS,yBAASP;;AACzC,8BAAA,AAAA0D,yBAAA,AAAAA,hDAACpD,uCAAgBC,yBAASP;mBAftD,mFAAA,8CAAA,2CAAA,qDAAA,SAAA,sDAAA;;;AAwBJ,oBAAA,pBAAMgE;AAAN,AAAA,0FAAA,mDAAA,mFAAA,iDAAA,mDAAA,mFAEIR;;AAKJ,qBAAA,rBAAMS;AAAN,AACE,wDAAA,jDAACC,oIAAUF,0BAAW,wBAAA,xBAAiBG;;AAEzC,qBAAA,rBAAeC;AAAf,AACE,OAACH","names":["ui.core/scramble?","scramblies","word","cljs.core/count","clojure.string/includes?","cljs.core/first","clojure.string/replace-first","cljs.core._EQ_","ui.core/handle-request","letters","c__26616__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26617__auto__","switch__26546__auto__","state_26876","state_val_26877","inst_26871","inst_26872","cljs.core.async.impl.ioc-helpers/take!","inst_26874","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26878","state-machine__26547__auto__","ret-value__26548__auto__","result__26549__auto__","cljs.core/keyword-identical?","ex__26550__auto__","e26879","statearr-26880","cljs.core/seq","statearr-26881","state__26618__auto__","statearr-26882","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","state_26895","state_val_26896","inst_26883","inst_26884","inst_26885","cljs.core/PersistentHashMap","inst_26886","inst_26887","inst_26888","inst_26890","inst_26891","inst_26892","inst_26893","statearr-26897","statearr-26898","e26899","statearr-26900","statearr-26901","statearr-26902","cljs_http.client.get","cljs.core.prn","ui.core/scramblies-form","reagent.core.atom","cljs.core/deref","p1__26903#","e","cljs.core.println","cljs.core/reset!","js/alert","ui.core/home-page","ui.core/mount-root","reagent.dom.render","js/document","ui.core/init!"],"sourcesContent":["(ns ui.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require\n   [clojure.string :as str]\n   [reagent.core :as r :refer [atom]]\n   [reagent.dom :as d]\n   [cljs-http.client :as http]\n   [cljs.core.async :refer [<!]]))\n\n\n(defn scramble?\n  [scramblies word]\n  (if (and (> (count word) 0)\n           (str/includes? scramblies (str (first word))))\n    (recur (str/replace-first scramblies (first word) \"\")\n           (str/replace-first word (str (first word)) \"\"))\n    (= (count word) 0)))\n\n\n(defn handle-request\n  [letters word]\n  (go (let [response (<! (http/get (str \"http://localhost:8888/scramble/\" letters \"/\" word)))]\n        response))\n  (go (let [response (<! (http/get (str \"http://localhost:8888/scramble/\" letters \"/\" word)\n                                   {:with-credentials? false\n                                    :query-params {}}))]\n        (prn (:status response))\n        (prn response))))\n\n\n(defn scramblies-form []\n  (let [letters (r/atom \"\")\n        word (r/atom \"\")]\n    (fn []\n      [:form {:on-submit (fn [e] (.preventDefault e) (println (str @letters)))}\n       [:input {:type \"text\"\n                :value @letters\n                :placeholder \"Add scrambled letters\"\n                :on-change #(do (reset! letters (-> % .-target .-value)))}]\n       [:br]\n       [:input {:type \"text\"\n                :value @word\n                :placeholder \"Add word\"\n                :on-change (fn [e] (reset! word (.-value (.-target e))))}]\n       [:br]\n       [:input {:type \"button\"\n                :value \"Scramblie?\"\n                :on-click (do (fn [] (js/alert (str (scramble? @letters @word)))\n                                (handle-request @letters @word)))}]\n       [:p {:type \"button\"\n            :value \"Scramblie?\"}]])))\n\n\n\n;; -------------------------\n;; Views\n\n(defn home-page []\n  [:div [:h2 \"Is your word hidding in the scramblies ?\"]\n   [scramblies-form]])\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}