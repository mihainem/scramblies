["^ ","~:output",["^ ","~:js","goog.provide('reagent.core');\nreagent.core.is_client = reagent.impl.util.is_client;\n/**\n * Create a native React element, by calling React.createElement directly.\n * \n *   That means the second argument must be a javascript object (or nil), and\n *   that any Reagent hiccup forms must be processed with as-element. For example\n *   like this:\n * \n *   ```cljs\n *   (r/create-element \"div\" #js{:className \"foo\"}\n *  \"Hi \" (r/as-element [:strong \"world!\"])\n *   ```\n * \n *   which is equivalent to\n * \n *   ```cljs\n *   [:div.foo \"Hi\" [:strong \"world!\"]]\n *   ```\n */\nreagent.core.create_element = (function reagent$core$create_element(var_args){\nvar G__41348 = arguments.length;\nswitch (G__41348) {\ncase 1:\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nvar args_arr__4850__auto__ = [];\nvar len__4829__auto___41495 = arguments.length;\nvar i__4830__auto___41496 = (0);\nwhile(true){\nif((i__4830__auto___41496 < len__4829__auto___41495)){\nargs_arr__4850__auto__.push((arguments[i__4830__auto___41496]));\n\nvar G__41497 = (i__4830__auto___41496 + (1));\ni__4830__auto___41496 = G__41497;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4851__auto__ = (new cljs.core.IndexedSeq(args_arr__4850__auto__.slice((3)),(0),null));\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4851__auto__);\n\n}\n});\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$1 = (function (type){\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$2(type,null);\n}));\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$2 = (function (type,props){\n\nreturn module$node_modules$react$index.createElement(type,props);\n}));\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$3 = (function (type,props,child){\n\nreturn module$node_modules$react$index.createElement(type,props,child);\n}));\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic = (function (type,props,child,children){\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(module$node_modules$react$index.createElement,type,props,child,children);\n}));\n\n/** @this {Function} */\n(reagent.core.create_element.cljs$lang$applyTo = (function (seq41342){\nvar G__41343 = cljs.core.first(seq41342);\nvar seq41342__$1 = cljs.core.next(seq41342);\nvar G__41344 = cljs.core.first(seq41342__$1);\nvar seq41342__$2 = cljs.core.next(seq41342__$1);\nvar G__41345 = cljs.core.first(seq41342__$2);\nvar seq41342__$3 = cljs.core.next(seq41342__$2);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41343,G__41344,G__41345,seq41342__$3);\n}));\n\n(reagent.core.create_element.cljs$lang$maxFixedArity = (3));\n\n/**\n * Turns a vector of Hiccup syntax into a React element. Returns form\n *   unchanged if it is not a vector.\n */\nreagent.core.as_element = (function reagent$core$as_element(var_args){\nvar G__41354 = arguments.length;\nswitch (G__41354) {\ncase 1:\nreturn reagent.core.as_element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.as_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(reagent.core.as_element.cljs$core$IFn$_invoke$arity$1 = (function (form){\nreturn reagent.impl.protocols.as_element(reagent.impl.template.default_compiler,form);\n}));\n\n(reagent.core.as_element.cljs$core$IFn$_invoke$arity$2 = (function (form,compiler){\nreturn reagent.impl.protocols.as_element(compiler,form);\n}));\n\n(reagent.core.as_element.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns an adapter for a native React class, that may be used\n *   just like a Reagent component function or class in Hiccup forms.\n */\nreagent.core.adapt_react_class = (function reagent$core$adapt_react_class(c){\n\nreturn reagent.impl.template.adapt_react_class(c);\n});\n/**\n * Returns an adapter for a Reagent component, that may be used from\n *   React, for example in JSX. A single argument, props, is passed to\n *   the component, converted to a map.\n */\nreagent.core.reactify_component = (function reagent$core$reactify_component(var_args){\nvar G__41358 = arguments.length;\nswitch (G__41358) {\ncase 1:\nreturn reagent.core.reactify_component.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.reactify_component.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(reagent.core.reactify_component.cljs$core$IFn$_invoke$arity$1 = (function (c){\nreturn reagent.core.reactify_component.cljs$core$IFn$_invoke$arity$2(c,reagent.impl.template.default_compiler);\n}));\n\n(reagent.core.reactify_component.cljs$core$IFn$_invoke$arity$2 = (function (c,compiler){\n\nreturn reagent.impl.component.reactify_component(c,compiler);\n}));\n\n(reagent.core.reactify_component.cljs$lang$maxFixedArity = 2);\n\n/**\n * Creates JS class based on provided Clojure map, for example:\n * \n *   ```cljs\n *   {;; Constructor\n * :constructor (fn [this props])\n * :get-initial-state (fn [this])\n * ;; Static methods\n * :get-derived-state-from-props (fn [props state] partial-state)\n * :get-derived-state-from-error (fn [error] partial-state)\n * ;; Methods\n * :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n * :should-component-update (fn [this old-argv new-argv])\n * :component-did-mount (fn [this])\n * :component-did-update (fn [this old-argv old-state snapshot])\n * :component-will-unmount (fn [this])\n * :component-did-catch (fn [this error info])\n * :reagent-render (fn [args....])\n * ;; Or alternatively:\n * :render (fn [this])\n * ;; Deprecated methods:\n * :UNSAFE_component-will-receive-props (fn [this new-argv])\n * :UNSAFE_component-will-update (fn [this new-argv new-state])\n * :UNSAFE_component-will-mount (fn [this])}\n *   ```\n * \n *   Everything is optional, except either :reagent-render or :render.\n * \n *   Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n *   and can be provided in snake-case or camelCase.\n * \n *   State can be initialized using constructor, which matches React.Component class,\n *   or using getInitialState which matches old React createClass function and is\n *   now implemented by Reagent for compatibility.\n * \n *   State can usually be anything, e.g. Cljs object. But if using getDerivedState\n *   methods, the state has to be plain JS object as React implementation uses\n *   Object.assign to merge partial state into the current state.\n * \n *   React built-in static methods or properties are automatically defined as statics.\n */\nreagent.core.create_class = (function reagent$core$create_class(var_args){\nvar G__41360 = arguments.length;\nswitch (G__41360) {\ncase 1:\nreturn reagent.core.create_class.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.create_class.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(reagent.core.create_class.cljs$core$IFn$_invoke$arity$1 = (function (spec){\nreturn reagent.impl.component.create_class(spec,reagent.impl.template.default_compiler);\n}));\n\n(reagent.core.create_class.cljs$core$IFn$_invoke$arity$2 = (function (spec,compiler){\nreturn reagent.impl.component.create_class(spec,compiler);\n}));\n\n(reagent.core.create_class.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns the current React component (a.k.a `this`) in a component\n *   function.\n */\nreagent.core.current_component = (function reagent$core$current_component(){\nreturn reagent.impl.component._STAR_current_component_STAR_;\n});\n/**\n * Returns an atom containing a components state.\n */\nreagent.core.state_atom = (function reagent$core$state_atom(this$){\n\nreturn reagent.impl.component.state_atom(this$);\n});\n/**\n * Returns the state of a component, as set with replace-state or set-state.\n *   Equivalent to `(deref (r/state-atom this))`\n */\nreagent.core.state = (function reagent$core$state(this$){\n\nreturn cljs.core.deref(reagent.core.state_atom(this$));\n});\n/**\n * Set state of a component.\n *   Equivalent to `(reset! (state-atom this) new-state)`\n */\nreagent.core.replace_state = (function reagent$core$replace_state(this$,new_state){\n\n\nreturn cljs.core.reset_BANG_(reagent.core.state_atom(this$),new_state);\n});\n/**\n * Merge component state with new-state.\n *   Equivalent to `(swap! (state-atom this) merge new-state)`\n */\nreagent.core.set_state = (function reagent$core$set_state(this$,new_state){\n\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(reagent.core.state_atom(this$),cljs.core.merge,new_state);\n});\n/**\n * Force a component to re-render immediately.\n * \n *   If the second argument is true, child components will also be\n *   re-rendered, even is their arguments have not changed.\n */\nreagent.core.force_update = (function reagent$core$force_update(var_args){\nvar G__41374 = arguments.length;\nswitch (G__41374) {\ncase 1:\nreturn reagent.core.force_update.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.force_update.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(reagent.core.force_update.cljs$core$IFn$_invoke$arity$1 = (function (this$){\nreturn reagent.core.force_update.cljs$core$IFn$_invoke$arity$2(this$,false);\n}));\n\n(reagent.core.force_update.cljs$core$IFn$_invoke$arity$2 = (function (this$,deep){\nreagent.ratom.flush_BANG_();\n\nreagent.impl.util.force_update(this$,deep);\n\nreturn reagent.impl.batching.flush_after_render();\n}));\n\n(reagent.core.force_update.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns the props passed to a component.\n */\nreagent.core.props = (function reagent$core$props(this$){\n\nreturn reagent.impl.component.get_props(this$);\n});\n/**\n * Returns the children passed to a component.\n */\nreagent.core.children = (function reagent$core$children(this$){\n\nreturn reagent.impl.component.get_children(this$);\n});\n/**\n * Returns the entire Hiccup form passed to the component.\n */\nreagent.core.argv = (function reagent$core$argv(this$){\n\nreturn reagent.impl.component.get_argv(this$);\n});\n/**\n * Function which normalizes and combines class values to a string\n * \n *   Reagent allows classes to be defined as:\n *   - Strings\n *   - Named objects (Symbols or Keywords)\n *   - Collections of previous types\n */\nreagent.core.class_names = (function reagent$core$class_names(var_args){\nvar G__41392 = arguments.length;\nswitch (G__41392) {\ncase 0:\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4850__auto__ = [];\nvar len__4829__auto___41514 = arguments.length;\nvar i__4830__auto___41515 = (0);\nwhile(true){\nif((i__4830__auto___41515 < len__4829__auto___41514)){\nargs_arr__4850__auto__.push((arguments[i__4830__auto___41515]));\n\nvar G__41516 = (i__4830__auto___41515 + (1));\ni__4830__auto___41515 = G__41516;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4851__auto__ = (new cljs.core.IndexedSeq(args_arr__4850__auto__.slice((2)),(0),null));\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4851__auto__);\n\n}\n});\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn null;\n}));\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$1 = (function (class$){\nreturn reagent.impl.util.class_names.cljs$core$IFn$_invoke$arity$1(class$);\n}));\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$2 = (function (class1,class2){\nreturn reagent.impl.util.class_names.cljs$core$IFn$_invoke$arity$2(class1,class2);\n}));\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$variadic = (function (class1,class2,others){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(reagent.impl.util.class_names,class1,class2,others);\n}));\n\n/** @this {Function} */\n(reagent.core.class_names.cljs$lang$applyTo = (function (seq41383){\nvar G__41387 = cljs.core.first(seq41383);\nvar seq41383__$1 = cljs.core.next(seq41383);\nvar G__41388 = cljs.core.first(seq41383__$1);\nvar seq41383__$2 = cljs.core.next(seq41383__$1);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41387,G__41388,seq41383__$2);\n}));\n\n(reagent.core.class_names.cljs$lang$maxFixedArity = (2));\n\n/**\n * Utility function that merges some maps, handling `:class` and `:style`.\n * \n *   The :class value is always normalized (using `class-names`) even if no\n *   merging is done.\n */\nreagent.core.merge_props = (function reagent$core$merge_props(var_args){\nvar G__41410 = arguments.length;\nswitch (G__41410) {\ncase 0:\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4850__auto__ = [];\nvar len__4829__auto___41522 = arguments.length;\nvar i__4830__auto___41523 = (0);\nwhile(true){\nif((i__4830__auto___41523 < len__4829__auto___41522)){\nargs_arr__4850__auto__.push((arguments[i__4830__auto___41523]));\n\nvar G__41528 = (i__4830__auto___41523 + (1));\ni__4830__auto___41523 = G__41528;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4851__auto__ = (new cljs.core.IndexedSeq(args_arr__4850__auto__.slice((2)),(0),null));\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4851__auto__);\n\n}\n});\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn reagent.impl.util.merge_props.cljs$core$IFn$_invoke$arity$0();\n}));\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$1 = (function (defaults){\nreturn reagent.impl.util.merge_props.cljs$core$IFn$_invoke$arity$1(defaults);\n}));\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$2 = (function (defaults,props){\nreturn reagent.impl.util.merge_props.cljs$core$IFn$_invoke$arity$2(defaults,props);\n}));\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$variadic = (function (defaults,props,others){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(reagent.impl.util.merge_props,defaults,props,others);\n}));\n\n/** @this {Function} */\n(reagent.core.merge_props.cljs$lang$applyTo = (function (seq41407){\nvar G__41408 = cljs.core.first(seq41407);\nvar seq41407__$1 = cljs.core.next(seq41407);\nvar G__41409 = cljs.core.first(seq41407__$1);\nvar seq41407__$2 = cljs.core.next(seq41407__$1);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41408,G__41409,seq41407__$2);\n}));\n\n(reagent.core.merge_props.cljs$lang$maxFixedArity = (2));\n\n/**\n * Render dirty components immediately.\n * \n *   Note that this may not work in event handlers, since React.js does\n *   batching of updates there.\n */\nreagent.core.flush = (function reagent$core$flush(){\nreturn reagent.impl.batching.flush();\n});\n/**\n * Like clojure.core/atom, except that it keeps track of derefs.\n *   Reagent components that derefs one of these are automatically\n *   re-rendered.\n */\nreagent.core.atom = (function reagent$core$atom(var_args){\nvar G__41422 = arguments.length;\nswitch (G__41422) {\ncase 1:\nreturn reagent.core.atom.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nvar args_arr__4850__auto__ = [];\nvar len__4829__auto___41534 = arguments.length;\nvar i__4830__auto___41535 = (0);\nwhile(true){\nif((i__4830__auto___41535 < len__4829__auto___41534)){\nargs_arr__4850__auto__.push((arguments[i__4830__auto___41535]));\n\nvar G__41536 = (i__4830__auto___41535 + (1));\ni__4830__auto___41535 = G__41536;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4851__auto__ = (new cljs.core.IndexedSeq(args_arr__4850__auto__.slice((1)),(0),null));\nreturn reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4851__auto__);\n\n}\n});\n\n(reagent.core.atom.cljs$core$IFn$_invoke$arity$1 = (function (x){\nreturn reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1(x);\n}));\n\n(reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic = (function (x,rest){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(reagent.ratom.atom,x,rest);\n}));\n\n/** @this {Function} */\n(reagent.core.atom.cljs$lang$applyTo = (function (seq41420){\nvar G__41421 = cljs.core.first(seq41420);\nvar seq41420__$1 = cljs.core.next(seq41420);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41421,seq41420__$1);\n}));\n\n(reagent.core.atom.cljs$lang$maxFixedArity = (1));\n\n/**\n * Takes a function and optional arguments, and returns a derefable\n *   containing the output of that function. If the function derefs\n *   Reagent atoms (or track, etc), the value will be updated whenever\n *   the atom changes.\n * \n *   In other words, `@(track foo bar)` will produce the same result\n *   as `(foo bar)`, but foo will only be called again when the atoms it\n *   depends on changes, and will only trigger updates of components when\n *   its result changes.\n * \n *   track is lazy, i.e the function is only evaluated on deref.\n */\nreagent.core.track = (function reagent$core$track(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___41541 = arguments.length;\nvar i__4830__auto___41542 = (0);\nwhile(true){\nif((i__4830__auto___41542 < len__4829__auto___41541)){\nargs__4835__auto__.push((arguments[i__4830__auto___41542]));\n\nvar G__41545 = (i__4830__auto___41542 + (1));\ni__4830__auto___41542 = G__41545;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((1) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((1)),(0),null)):null);\nreturn reagent.core.track.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4836__auto__);\n});\n\n(reagent.core.track.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\n\nreturn reagent.ratom.make_track(f,args);\n}));\n\n(reagent.core.track.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.core.track.cljs$lang$applyTo = (function (seq41434){\nvar G__41435 = cljs.core.first(seq41434);\nvar seq41434__$1 = cljs.core.next(seq41434);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41435,seq41434__$1);\n}));\n\n/**\n * An eager version of track. The function passed is called\n *   immediately, and continues to be called when needed, until stopped\n *   with dispose!.\n */\nreagent.core.track_BANG_ = (function reagent$core$track_BANG_(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___41550 = arguments.length;\nvar i__4830__auto___41551 = (0);\nwhile(true){\nif((i__4830__auto___41551 < len__4829__auto___41550)){\nargs__4835__auto__.push((arguments[i__4830__auto___41551]));\n\nvar G__41552 = (i__4830__auto___41551 + (1));\ni__4830__auto___41551 = G__41552;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((1) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((1)),(0),null)):null);\nreturn reagent.core.track_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4836__auto__);\n});\n\n(reagent.core.track_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\n\nreturn reagent.ratom.make_track_BANG_(f,args);\n}));\n\n(reagent.core.track_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.core.track_BANG_.cljs$lang$applyTo = (function (seq41443){\nvar G__41444 = cljs.core.first(seq41443);\nvar seq41443__$1 = cljs.core.next(seq41443);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41444,seq41443__$1);\n}));\n\n/**\n * Stop the result of track! from updating.\n */\nreagent.core.dispose_BANG_ = (function reagent$core$dispose_BANG_(x){\nreturn reagent.ratom.dispose_BANG_(x);\n});\n/**\n * Provide a combination of value and callback, that looks like an atom.\n * \n *   The first argument can be any value, that will be returned when the\n *   result is deref'ed.\n * \n *   The second argument should be a function, that is called with the\n *   optional extra arguments provided to wrap, and the new value of the\n *   resulting 'atom'.\n * \n *   Use for example like this:\n * \n *   ```cljs\n *   (wrap (:foo @state)\n *      swap! state assoc :foo)\n *   ```\n * \n *   Probably useful only for passing to child components.\n */\nreagent.core.wrap = (function reagent$core$wrap(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___41553 = arguments.length;\nvar i__4830__auto___41554 = (0);\nwhile(true){\nif((i__4830__auto___41554 < len__4829__auto___41553)){\nargs__4835__auto__.push((arguments[i__4830__auto___41554]));\n\nvar G__41555 = (i__4830__auto___41554 + (1));\ni__4830__auto___41554 = G__41555;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((2) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((2)),(0),null)):null);\nreturn reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4836__auto__);\n});\n\n(reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic = (function (value,reset_fn,args){\n\nreturn reagent.ratom.make_wrapper(value,reset_fn,args);\n}));\n\n(reagent.core.wrap.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(reagent.core.wrap.cljs$lang$applyTo = (function (seq41446){\nvar G__41447 = cljs.core.first(seq41446);\nvar seq41446__$1 = cljs.core.next(seq41446);\nvar G__41448 = cljs.core.first(seq41446__$1);\nvar seq41446__$2 = cljs.core.next(seq41446__$1);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41447,G__41448,seq41446__$2);\n}));\n\n/**\n * Provide a cursor into a Reagent atom.\n * \n *   Behaves like a Reagent atom but focuses updates and derefs to\n *   the specified path within the wrapped Reagent atom. e.g.,\n * \n *   ```cljs\n *   (let [c (cursor ra [:nested :content])]\n *  ... @c ;; equivalent to (get-in @ra [:nested :content])\n *  ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n *  ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n *  )\n *   ```\n * \n *   The first parameter can also be a function, that should look\n *   something like this:\n * \n *   ```cljs\n *   (defn set-get\n *  ([k] (get-in @state k))\n *  ([k v] (swap! state assoc-in k v)))\n *   ```\n * \n *   The function will be called with one argument – the path passed to\n *   cursor – when the cursor is deref'ed, and two arguments (path and\n *   new value) when the cursor is modified.\n * \n *   Given that set-get function, (and that state is a Reagent atom, or\n *   another cursor) these cursors are equivalent:\n *   `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n * \n *   Note that a cursor is lazy: its value will not change until it is\n *   used. This may be noticed with add-watch.\n */\nreagent.core.cursor = (function reagent$core$cursor(src,path){\nreturn reagent.ratom.cursor(src,path);\n});\n/**\n * Swaps the value of a to be `(apply f current-value-of-atom args)`.\n * \n *   rswap! works like swap!, except that recursive calls to rswap! on\n *   the same atom are allowed – and it always returns nil.\n */\nreagent.core.rswap_BANG_ = (function reagent$core$rswap_BANG_(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___41556 = arguments.length;\nvar i__4830__auto___41557 = (0);\nwhile(true){\nif((i__4830__auto___41557 < len__4829__auto___41556)){\nargs__4835__auto__.push((arguments[i__4830__auto___41557]));\n\nvar G__41558 = (i__4830__auto___41557 + (1));\ni__4830__auto___41557 = G__41558;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((2) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((2)),(0),null)):null);\nreturn reagent.core.rswap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4836__auto__);\n});\n\n(reagent.core.rswap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (a,f,args){\n\n\nif(cljs.core.truth_(a.rswapping)){\n(function (){var or__4223__auto__ = a.rswapfs;\nif(cljs.core.truth_(or__4223__auto__)){\nreturn or__4223__auto__;\n} else {\nreturn (a.rswapfs = []);\n}\n})().push((function (p1__41451_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,p1__41451_SHARP_,args);\n}));\n} else {\n(a.rswapping = true);\n\ntry{cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,(function (state){\nvar s = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,state,args);\nwhile(true){\nvar temp__5755__auto__ = (function (){var G__41455 = a;\nvar G__41455__$1 = (((G__41455 == null))?null:G__41455.rswapfs);\nif((G__41455__$1 == null)){\nreturn null;\n} else {\nreturn G__41455__$1.shift();\n}\n})();\nif((temp__5755__auto__ == null)){\nreturn s;\n} else {\nvar sf = temp__5755__auto__;\nvar G__41559 = (sf.cljs$core$IFn$_invoke$arity$1 ? sf.cljs$core$IFn$_invoke$arity$1(s) : sf.call(null,s));\ns = G__41559;\ncontinue;\n}\nbreak;\n}\n}));\n}finally {(a.rswapping = false);\n}}\n\nreturn null;\n}));\n\n(reagent.core.rswap_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(reagent.core.rswap_BANG_.cljs$lang$applyTo = (function (seq41452){\nvar G__41453 = cljs.core.first(seq41452);\nvar seq41452__$1 = cljs.core.next(seq41452);\nvar G__41454 = cljs.core.first(seq41452__$1);\nvar seq41452__$2 = cljs.core.next(seq41452__$1);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41453,G__41454,seq41452__$2);\n}));\n\n/**\n * Run f using requestAnimationFrame or equivalent.\n * \n *   f will be called just before components are rendered.\n */\nreagent.core.next_tick = (function reagent$core$next_tick(f){\nreturn reagent.impl.batching.do_before_flush(f);\n});\n/**\n * Run f using requestAnimationFrame or equivalent.\n * \n *   f will be called just after any queued renders in the next animation\n *   frame (and even if no renders actually occur).\n */\nreagent.core.after_render = (function reagent$core$after_render(f){\nreturn reagent.impl.batching.do_after_render(f);\n});\n/**\n * Works just like clojure.core/partial, but the result can be compared with =\n */\nreagent.core.partial = (function reagent$core$partial(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___41561 = arguments.length;\nvar i__4830__auto___41562 = (0);\nwhile(true){\nif((i__4830__auto___41562 < len__4829__auto___41561)){\nargs__4835__auto__.push((arguments[i__4830__auto___41562]));\n\nvar G__41563 = (i__4830__auto___41562 + (1));\ni__4830__auto___41562 = G__41563;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((1) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((1)),(0),null)):null);\nreturn reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4836__auto__);\n});\n\n(reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nreturn reagent.impl.util.make_partial_fn(f,args);\n}));\n\n(reagent.core.partial.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.core.partial.cljs$lang$applyTo = (function (seq41466){\nvar G__41467 = cljs.core.first(seq41466);\nvar seq41466__$1 = cljs.core.next(seq41466);\nvar self__4816__auto__ = this;\nreturn self__4816__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41467,seq41466__$1);\n}));\n\n/**\n * Creates Compiler object with given `opts`,\n *   this can be passed to `render`, `as-element` and other functions to control\n *   how they turn the Reagent-style Hiccup into React components and elements.\n */\nreagent.core.create_compiler = (function reagent$core$create_compiler(opts){\nreturn reagent.impl.template.create_compiler(opts);\n});\n/**\n * Globally sets the Compiler object used by `render`, `as-element` and other\n *   calls by default, when no `compiler` parameter is provided.\n * \n *   Use `nil` value to restore the original default compiler.\n */\nreagent.core.set_default_compiler_BANG_ = (function reagent$core$set_default_compiler_BANG_(compiler){\nreturn reagent.impl.template.set_default_compiler_BANG_((((compiler == null))?reagent.impl.template.default_compiler_STAR_:compiler));\n});\nreagent.core.render = (function reagent$core$render(var_args){\nvar args__4835__auto__ = [];\nvar len__4829__auto___41564 = arguments.length;\nvar i__4830__auto___41565 = (0);\nwhile(true){\nif((i__4830__auto___41565 < len__4829__auto___41564)){\nargs__4835__auto__.push((arguments[i__4830__auto___41565]));\n\nvar G__41566 = (i__4830__auto___41565 + (1));\ni__4830__auto___41565 = G__41566;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4836__auto__ = ((((0) < args__4835__auto__.length))?(new cljs.core.IndexedSeq(args__4835__auto__.slice((0)),(0),null)):null);\nreturn reagent.core.render.cljs$core$IFn$_invoke$arity$variadic(argseq__4836__auto__);\n});\n\n(reagent.core.render.cljs$core$IFn$_invoke$arity$variadic = (function (_){\nthrow (new Error(\"Reagent.core/render function was moved to reagent.dom namespace in Reagent v1.0.\"));\n}));\n\n(reagent.core.render.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(reagent.core.render.cljs$lang$applyTo = (function (seq41481){\nvar self__4817__auto__ = this;\nreturn self__4817__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq41481));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$assert-some","~$reagent.debug","~$assert-component","^D","~$assert-js-object","^D","~$assert-new-state","^D","~$assert-callable","^D"],"~:excludes",["~#set",["~$atom","~$flush","~$partial"]],"~:macros",["^ ","~$with-let",["^ ","~:arglists",["~#list",[["~$bindings","~$&","~$body"]]],"~:doc","Bind variables as with let, except that when used in a component\n  the bindings are only evaluated once. Also takes an optional finally\n  clause at the end, that is executed when the component is\n  destroyed.","^7",4,"^8",1,"^6","reagent/core.clj","~:name","~$reagent.core/with-let","~:ns","~$reagent.core","~:macro",true],"~$reaction",["^ ","^P",["^Q",[["~$&","^S"]]],"^T","Creates Reaction from the body, returns a derefable\n  containing the result of the body. If the body derefs\n  reactive values (Reagent atons, track, etc), the body\n  will run again and the value of the Reaction is updated.\n\n  New Reaction is created everytime reaction is called,\n  so caller needs to take care that new reaction isn't created\n  e.g. every component render, by using with-let, form-2 or form-3\n  components or other solutions. Consider using reagent.core/track,\n  for function that caches the derafable value, and can thus be safely\n  used in e.g. render function safely.","^7",12,"^8",1,"^6","reagent/core.clj","^U","~$reagent.core/reaction","^W","^X","^Y",true]],"^U","^X","~:op","^W","~:imports",null,"~:requires",["^ ","~$reagent.impl.util","^13","~$reagent.impl.protocols","^14","~$p","^14","~$comp","~$reagent.impl.component","~$reagent.ratom","^17","^>","^?","~$cljs.core","^18","^?","^?","~$goog","^19","~$reagent.impl.template","^1:","~$reagent.impl.batching","^1;","^16","^16","~$util","^13","~$tmpl","^1:","~$ratom","^17","~$deb","^D","~$batch","^1;","^D","^D"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",null,"^1C",["^ ","^X","^X","^D","^D","^1?","^D","^18","^18","^17","^17","^1>","^17"],"~:form",["^Q",["~$ns","^X",["^Q",["^1C",["^X"]]],["^Q",["~:refer-clojure","~:exclude",["^M","^K","^L"]]],["^Q",["^1B",["^>","~:as","^>"],["^1:","^1I","^1="],["^16","^1I","^15"],["^13","^1I","^1<"],["^1;","^1I","^1@"],["^14","^1I","~$p"],["^17","^1I","^1>"],["^D","^1I","^1?","~:refer-macros",["^C","^E","^F","^G","^H"]]]]]],"~:flags",["^ ","^1C",["^J",[]],"^1B",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^19","^18","^?","^1:","^16","^13","^1;","^14","^17","^D"]],"^W","^X","~:resource-id",["~:shadow.build.classpath/resource","reagent/core.cljs"],"~:compiled-at",1625067522010,"~:resource-name","reagent/core.cljs","~:warnings",[],"~:source","(ns reagent.core\n  (:require-macros [reagent.core])\n  (:refer-clojure :exclude [partial atom flush])\n  (:require [react :as react]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.component :as comp]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :as deb :refer-macros [assert-some assert-component\n                                                  assert-js-object assert-new-state\n                                                  assert-callable]]))\n\n(def is-client util/is-client)\n\n(defn create-element\n  \"Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \\\"div\\\" #js{:className \\\"foo\\\"}\n    \\\"Hi \\\" (r/as-element [:strong \\\"world!\\\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \\\"Hi\\\" [:strong \\\"world!\\\"]]\n  ```\"\n  ([type]\n   (create-element type nil))\n  ([type props]\n   (assert-js-object props)\n   (react/createElement type props))\n  ([type props child]\n   (assert-js-object props)\n   (react/createElement type props child))\n  ([type props child & children]\n   (assert-js-object props)\n   (apply react/createElement type props child children)))\n\n(defn as-element\n  \"Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector.\"\n  ([form] (p/as-element tmpl/default-compiler form))\n  ([form compiler] (p/as-element compiler form)))\n\n(defn adapt-react-class\n  \"Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms.\"\n  [c]\n  (assert-some c \"Component\")\n  (tmpl/adapt-react-class c))\n\n(defn reactify-component\n  \"Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.\"\n  ([c] (reactify-component c tmpl/default-compiler))\n  ([c compiler]\n   (assert-some c \"Component\")\n   (comp/reactify-component c compiler)))\n\n(defn create-class\n  \"Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics.\"\n  ([spec]\n   (comp/create-class spec tmpl/default-compiler))\n  ([spec compiler]\n   (comp/create-class spec compiler)))\n\n\n(defn current-component\n  \"Returns the current React component (a.k.a `this`) in a component\n  function.\"\n  []\n  comp/*current-component*)\n\n(defn state-atom\n  \"Returns an atom containing a components state.\"\n  [this]\n  (assert-component this)\n  (comp/state-atom this))\n\n(defn state\n  \"Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`\"\n  [this]\n  (assert-component this)\n  (deref (state-atom this)))\n\n(defn replace-state\n  \"Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`\"\n  [this new-state]\n  (assert-component this)\n  (assert-new-state new-state)\n  (reset! (state-atom this) new-state))\n\n(defn set-state\n  \"Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`\"\n  [this new-state]\n  (assert-component this)\n  (assert-new-state new-state)\n  (swap! (state-atom this) merge new-state))\n\n(defn force-update\n  \"Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.\"\n  ([this]\n   (force-update this false))\n  ([this deep]\n   (ratom/flush!)\n   (util/force-update this deep)\n   (batch/flush-after-render)))\n\n(defn props\n  \"Returns the props passed to a component.\"\n  [this]\n  (assert-component this)\n  (comp/get-props this))\n\n(defn children\n  \"Returns the children passed to a component.\"\n  [this]\n  (assert-component this)\n  (comp/get-children this))\n\n(defn argv\n  \"Returns the entire Hiccup form passed to the component.\"\n  [this]\n  (assert-component this)\n  (comp/get-argv this))\n\n(defn class-names\n  \"Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types\"\n  ([])\n  ([class] (util/class-names class))\n  ([class1 class2] (util/class-names class1 class2))\n  ([class1 class2 & others] (apply util/class-names class1 class2 others)))\n\n(defn merge-props\n  \"Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done.\"\n  ([] (util/merge-props))\n  ([defaults] (util/merge-props defaults))\n  ([defaults props] (util/merge-props defaults props))\n  ([defaults props & others] (apply util/merge-props defaults props others)))\n\n(defn flush\n  \"Render dirty components immediately.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there.\"\n  []\n  (batch/flush))\n\n;; Ratom\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered.\"\n  ([x] (ratom/atom x))\n  ([x & rest] (apply ratom/atom x rest)))\n\n(defn track\n  \"Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.\"\n  [f & args]\n  {:pre [(ifn? f)]}\n  (ratom/make-track f args))\n\n(defn track!\n  \"An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.\"\n  [f & args]\n  {:pre [(ifn? f)]}\n  (ratom/make-track! f args))\n\n(defn dispose!\n  \"Stop the result of track! from updating.\"\n  [x]\n  (ratom/dispose! x))\n\n(defn wrap\n  \"Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components.\"\n  [value reset-fn & args]\n  (assert-callable reset-fn)\n  (ratom/make-wrapper value reset-fn args))\n\n\n;; RCursor\n\n(defn cursor\n  \"Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument – the path passed to\n  cursor – when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch.\"\n  ([src path]\n   (ratom/cursor src path)))\n\n\n;; Utilities\n\n(defn rswap!\n  \"Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil.\"\n  [^IAtom a f & args]\n  {:pre [(satisfies? IAtom a)\n         (ifn? f)]}\n  (if (.-rswapping a)\n    (-> (or (.-rswapfs a)\n            (set! (.-rswapfs a) (array)))\n        (.push #(apply f % args)))\n    (do (set! (.-rswapping a) true)\n        (try (swap! a (fn [state]\n                        (loop [s (apply f state args)]\n                          (if-some [sf (some-> a .-rswapfs .shift)]\n                            (recur (sf s))\n                            s))))\n             (finally\n               (set! (.-rswapping a) false)))))\n  nil)\n\n(defn next-tick\n  \"Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered.\"\n  [f]\n  (batch/do-before-flush f))\n\n(defn after-render\n  \"Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur).\"\n  [f]\n  (batch/do-after-render f))\n\n(defn partial\n  \"Works just like clojure.core/partial, but the result can be compared with =\"\n  [f & args]\n  (util/make-partial-fn f args))\n\n(defn create-compiler\n  \"Creates Compiler object with given `opts`,\n  this can be passed to `render`, `as-element` and other functions to control\n  how they turn the Reagent-style Hiccup into React components and elements.\"\n  [opts]\n  (tmpl/create-compiler opts))\n\n(defn set-default-compiler!\n  \"Globally sets the Compiler object used by `render`, `as-element` and other\n  calls by default, when no `compiler` parameter is provided.\n\n  Use `nil` value to restore the original default compiler.\"\n  [compiler]\n  (tmpl/set-default-compiler! (if (nil? compiler)\n                                tmpl/default-compiler*\n                                compiler)))\n\n(defn render\n  {:deprecated \"0.10.0\"}\n  [& _]\n  (throw (js/Error. \"Reagent.core/render function was moved to reagent.dom namespace in Reagent v1.0.\")))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAcA,AAAKA,yBAAUC;AAEf,AAAA;;;;;;;;;;;;;;;;;;8BAAA,sCAAAC,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAI;;;;;AAAA,CAAA,4DAAA,5DAAMJ,uEAiBFa;AAjBJ,AAkBG,sEAAA,/DAACC,0DAAeD;;;AAlBnB,CAAA,4DAAA,5DAAMb,uEAmBFa,KAAKE;AAnBT,AAoBG;AACA,OAACC,8CAAoBH,KAAKE;;;AArB7B,CAAA,4DAAA,5DAAMf,uEAsBFa,KAAKE,MAAME;AAtBf,AAuBG;AACA,OAACD,8CAAoBH,KAAKE,MAAME;;;AAxBnC,AAAA,CAAA,mEAAA,nEAAMjB,8EAyBFa,KAAKE,MAAME,MAAQC;AAzBvB,AA0BG;AACA,OAACC,8CAAMH,8CAAoBH,KAAKE,MAAME,MAAMC;;;AA3B/C;AAAA,CAAA,gDAAA,WAAAZ,3DAAMN;AAAN,AAAA,IAAAO,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,CAAA,sDAAA,tDAAMN;;AAAN,AA6BA,AAAA;;;;0BAAA,kCAAAF,5DAAMuB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMD,mEAGFE;AAHJ,AAGU,OAACC,kCAAaC,uCAAsBF;;;AAH9C,CAAA,wDAAA,xDAAMF,mEAIFE,KAAKG;AAJT,AAImB,OAACF,kCAAaE,SAASH;;;AAJ1C,CAAA,kDAAA,lDAAMF;;AAAN,AAMA;;;;iCAAA,jCAAMM,0EAGHC;AAHH,AAIE;AACA,OAACC,wCAAuBD;;AAE1B,AAAA;;;;;kCAAA,0CAAA9B,5EAAMiC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gEAAA,hEAAMS,2EAIFH;AAJJ,AAIO,OAACI,8DAAmBJ,EAAEH;;;AAJ7B,CAAA,gEAAA,hEAAMM,2EAKFH,EAAEF;AALN,AAMG;AACA,OAACO,0CAAwBL,EAAEF;;;AAP9B,CAAA,0DAAA,1DAAMK;;AAAN,AASA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAAA,oCAAAjC,hEAAMqC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAb,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMa,qEAwCFC;AAxCJ,AAyCG,OAACC,oCAAkBD,KAAKX;;;AAzC3B,CAAA,0DAAA,1DAAMU,qEA0CFC,KAAKV;AA1CT,AA2CG,OAACW,oCAAkBD,KAAKV;;;AA3C3B,CAAA,oDAAA,pDAAMS;;AAAN,AA8CA;;;;iCAAA,jCAAMG;AAAN,AAIEC;;AAEF;;;0BAAA,1BAAMC,4DAEHC;AAFH,AAGE;AACA,OAACC,kCAAgBD;;AAEnB;;;;qBAAA,rBAAME,kDAGHF;AAHH,AAIE;AACA,OAACG,gBAAM,AAACJ,wBAAWC;;AAErB;;;;6BAAA,7BAAMI,kEAGHJ,MAAKK;AAHR,AAIE;AACA;AACA,OAACC,sBAAO,AAACP,wBAAWC,OAAMK;;AAE5B;;;;yBAAA,zBAAME,0DAGHP,MAAKK;AAHR,AAIE;AACA;AACA,OAACG,mDAAM,AAACT,wBAAWC,OAAMS,gBAAMJ;;AAEjC,AAAA;;;;;;4BAAA,oCAAAhD,hEAAMsD;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAM8B,qEAKFX;AALJ,AAMG,qEAAA,9DAACY,wDAAaZ;;;AANjB,CAAA,0DAAA,1DAAMW,qEAOFX,MAAKa;AAPT,AAQG,AAACC;;AACD,AAACC,+BAAkBf,MAAKa;;AACxB,OAACG;;;AAVJ,CAAA,oDAAA,pDAAML;;AAAN,AAYA;;;qBAAA,rBAAMM,kDAEHjB;AAFH,AAGE;AACA,OAACkB,iCAAelB;;AAElB;;;wBAAA,xBAAMmB,wDAEHnB;AAFH,AAGE;AACA,OAACoB,oCAAkBpB;;AAErB;;;oBAAA,pBAAMqB,gDAEHrB;AAFH,AAGE;AACA,OAACsB,gCAActB;;AAEjB,AAAA;;;;;;;;2BAAA,mCAAA3C,9DAAMmE;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAAhE,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAgE,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA7D;;;;;AAAA,CAAA,yDAAA,zDAAM6D;AAAN,AAAA;;;AAAA,CAAA,yDAAA,zDAAMA,oEAQFI;AARJ,AAQW,OAACC,4DAAiBD;;;AAR7B,CAAA,yDAAA,zDAAMJ,oEASFM,OAAOC;AATX,AASmB,OAACF,4DAAiBC,OAAOC;;;AAT5C,AAAA,CAAA,gEAAA,hEAAMP,2EAUFM,OAAOC,OAASC;AAVpB,AAU4B,OAACtD,8CAAMuD,8BAAiBH,OAAOC,OAAOC;;;AAVlE;AAAA,CAAA,6CAAA,WAAAP,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA3D,gBAAA0D;IAAAA,eAAA,AAAAzD,eAAAyD;IAAAE,WAAA,AAAA5D,gBAAA0D;IAAAA,eAAA,AAAAzD,eAAAyD;AAAA,AAAA,IAAAtD,qBAAA;AAAA,AAAA,OAAAA,wDAAAuD,SAAAC,SAAAF;;;AAAA,CAAA,mDAAA,nDAAMD;;AAAN,AAYA,AAAA;;;;;;2BAAA,mCAAAnE,9DAAM8E;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAA3E,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAA2E,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAxE;;;;;AAAA,CAAA,yDAAA,zDAAMwE;AAAN,AAKM,OAACI;;;AALP,CAAA,yDAAA,zDAAMJ,oEAMFK;AANJ,AAMc,OAACD,4DAAiBC;;;AANhC,CAAA,yDAAA,zDAAML,oEAOFK,SAASlE;AAPb,AAOoB,OAACiE,4DAAiBC,SAASlE;;;AAP/C,AAAA,CAAA,gEAAA,hEAAM6D,2EAQFK,SAASlE,MAAQ0D;AARrB,AAQ6B,OAACtD,8CAAM+D,8BAAiBD,SAASlE,MAAM0D;;;AARpE;AAAA,CAAA,6CAAA,WAAAI,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAtE,gBAAAqE;IAAAA,eAAA,AAAApE,eAAAoE;IAAAE,WAAA,AAAAvE,gBAAAqE;IAAAA,eAAA,AAAApE,eAAAoE;AAAA,AAAA,IAAAjE,qBAAA;AAAA,AAAA,OAAAA,wDAAAkE,SAAAC,SAAAF;;;AAAA,CAAA,mDAAA,nDAAMD;;AAAN,AAUA;;;;;;qBAAA,rBAAMO;AAAN,AAME,OAACC;;AAIH,AAAA;;;;;oBAAA,4BAAAtF,hDAAMwF;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gDAAA,CAAA,UAAA;;;;AAAA,IAAArF,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,KAAAC,qBAAA,AAAAJ,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAqF,uDAAA,CAAA,UAAA,MAAAlF;;;;;AAAA,CAAA,kDAAA,lDAAMkF,6DAIFG;AAJJ,AAIO,OAACC,iDAAWD;;;AAJnB,AAAA,CAAA,yDAAA,zDAAMH,oEAKFG,EAAIE;AALR,AAKc,OAACxE,8CAAMyE,mBAAWH,EAAEE;;;AALlC;AAAA,CAAA,sCAAA,WAAAJ,jDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAhF,gBAAA+E;IAAAA,eAAA,AAAA9E,eAAA8E;AAAA,AAAA,IAAA3E,qBAAA;AAAA,AAAA,OAAAA,wDAAA4E,SAAAD;;;AAAA,CAAA,4CAAA,5CAAMD;;AAAN,AAOA,AAAA;;;;;;;;;;;;;qBAAA,6BAAAxF,lDAAMiG;AAAN,AAAA,IAAAF,qBAAA;AAAA,AAAA,IAAA3F,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAA2F,wBAAA,CAAA,UAAA1F;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAA2F,uBAAA,EAAA,CAAA,MAAA,AAAAD,4BAAA,AAAA,KAAAxF,qBAAA,AAAAwF,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAE,wDAAA,CAAA,UAAA,MAAAD;;;AAAA,AAAA,CAAA,0DAAA,1DAAMC,qEAYHG,EAAIC;AAZP,AAAA;AAcE,OAACC,yBAAiBF,EAAEC;;;AAdtB,CAAA,6CAAA,7CAAMJ;;AAAN;AAAA,CAAA,uCAAA,WAAAC,lDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAzF,gBAAAwF;IAAAA,eAAA,AAAAvF,eAAAuF;AAAA,AAAA,IAAApF,qBAAA;AAAA,AAAA,OAAAA,wDAAAqF,SAAAD;;;AAAA,AAgBA,AAAA;;;;;2BAAA,mCAAAlG,9DAAMuG;AAAN,AAAA,IAAAR,qBAAA;AAAA,AAAA,IAAA3F,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAA2F,wBAAA,CAAA,UAAA1F;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAA2F,uBAAA,EAAA,CAAA,MAAA,AAAAD,4BAAA,AAAA,KAAAxF,qBAAA,AAAAwF,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAQ,8DAAA,CAAA,UAAA,MAAAP;;;AAAA,AAAA,CAAA,gEAAA,hEAAMO,2EAIHH,EAAIC;AAJP,AAAA;AAME,OAACK,+BAAkBN,EAAEC;;;AANvB,CAAA,mDAAA,nDAAME;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA/F,gBAAA8F;IAAAA,eAAA,AAAA7F,eAAA6F;AAAA,AAAA,IAAA1F,qBAAA;AAAA,AAAA,OAAAA,wDAAA2F,SAAAD;;;AAAA,AAQA;;;6BAAA,7BAAMG,kEAEHhB;AAFH,AAGE,OAACiB,4BAAejB;;AAElB,AAAA;;;;;;;;;;;;;;;;;;;oBAAA,4BAAA3F,hDAAM6G;AAAN,AAAA,IAAAd,qBAAA;AAAA,AAAA,IAAA3F,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAA2F,wBAAA,CAAA,UAAA1F;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAA2F,uBAAA,EAAA,CAAA,MAAA,AAAAD,4BAAA,AAAA,KAAAxF,qBAAA,AAAAwF,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAc,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAb;;;AAAA,AAAA,CAAA,yDAAA,zDAAMa,oEAkBHI,MAAMC,SAAWb;AAlBpB,AAmBE;AACA,OAACc,2BAAmBF,MAAMC,SAASb;;;AApBrC,CAAA,4CAAA,5CAAMQ;;AAAN;AAAA,CAAA,sCAAA,WAAAC,jDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAArG,gBAAAoG;IAAAA,eAAA,AAAAnG,eAAAmG;IAAAE,WAAA,AAAAtG,gBAAAoG;IAAAA,eAAA,AAAAnG,eAAAmG;AAAA,AAAA,IAAAhG,qBAAA;AAAA,AAAA,OAAAA,wDAAAiG,SAAAC,SAAAF;;;AAAA,AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAAA,tBAAMM,oDAiCFC,IAAIC;AAjCR,AAkCG,OAACC,qBAAaF,IAAIC;;AAKrB,AAAA;;;;;;2BAAA,mCAAAtH,9DAAMwH;AAAN,AAAA,IAAAzB,qBAAA;AAAA,AAAA,IAAA3F,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAA2F,wBAAA,CAAA,UAAA1F;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAA2F,uBAAA,EAAA,CAAA,MAAA,AAAAD,4BAAA,AAAA,KAAAxF,qBAAA,AAAAwF,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAyB,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAxB;;;AAAA,AAAA,CAAA,gEAAA,hEAAMwB,2EAKII,EAAExB,EAAIC;AALhB,AAAA;AAAA;AAQE,oBAAI,AAAauB;AACX,iBAAAC,mBAAI,AAAWD,pCAEf;AAFA,AAAA,oBAAAC;AAAAA;;AACI,QAAM,AAAWD,YAAG;;UACxB,WAAAE;AAAA,AAAQ,uDAAAA,hDAACzG,8CAAM+E,mBAAIC;;;AACvB,AAAI,eAAA,dAAM,AAAauB;;AACnB,IAAA,AAAK,AAACzE,mDAAMyE,EAAE,WAAKG;AAAL,AACE,IAAOC,IAAE,AAAC3G,8CAAM+E,EAAE2B,MAAM1B;;AAAxB,AACE,IAAA4B,qBAAa,iBAAAE,WAAQP;IAARO,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,OAAAA;;;AAAb,AAAA,GAAA,CAAAF,sBAAA;AAEED;;AAFF,SAAAC,LAAUC;AAAV,AACE,eAAO,CAACA,mCAAAA,sCAAAA,LAAGF,kBAAAA;;;;;;;UAH/B,AAMO,eAAA,dAAM,AAAaJ;;;AAnBlC;;;AAAA,CAAA,mDAAA,nDAAMJ;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAhH,gBAAA+G;IAAAA,eAAA,AAAA9G,eAAA8G;IAAAE,WAAA,AAAAjH,gBAAA+G;IAAAA,eAAA,AAAA9G,eAAA8G;AAAA,AAAA,IAAA3G,qBAAA;AAAA,AAAA,OAAAA,wDAAA4G,SAAAC,SAAAF;;;AAAA,AAsBA;;;;;yBAAA,zBAAMW,0DAIHhC;AAJH,AAKE,OAACiC,sCAAsBjC;;AAEzB;;;;;;4BAAA,5BAAMkC,gEAKHlC;AALH,AAME,OAACmC,sCAAsBnC;;AAEzB,AAAA;;;uBAAA,+BAAApG,tDAAMwI;AAAN,AAAA,IAAAzC,qBAAA;AAAA,AAAA,IAAA3F,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAA2F,wBAAA,CAAA,UAAA1F;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAA2F,uBAAA,EAAA,CAAA,MAAA,AAAAD,4BAAA,AAAA,KAAAxF,qBAAA,AAAAwF,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAyC,0DAAA,CAAA,UAAA,MAAAxC;;;AAAA,AAAA,CAAA,4DAAA,5DAAMwC,uEAEHpC,EAAIC;AAFP,AAGE,OAACsC,kCAAqBvC,EAAEC;;;AAH1B,CAAA,+CAAA,/CAAMmC;;AAAN;AAAA,CAAA,yCAAA,WAAAC,pDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAhI,gBAAA+H;IAAAA,eAAA,AAAA9H,eAAA8H;AAAA,AAAA,IAAA3H,qBAAA;AAAA,AAAA,OAAAA,wDAAA4H,SAAAD;;;AAAA,AAKA;;;;;+BAAA,/BAAMG,sEAIHC;AAJH,AAKE,OAACC,sCAAqBD;;AAExB;;;;;;0CAAA,1CAAME,4FAKHnH;AALH,AAME,OAACoH,iDAA2B,EAAI,aAAA,ZAAMpH,mBACRqH,6CACArH;;AAEhC,AAAA,sBAAA,8BAAA5B,pDAAMkJ;AAAN,AAAA,IAAAnD,qBAAA;AAAA,AAAA,IAAA3F,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAA2F,wBAAA,CAAA,UAAA1F;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAA2F,uBAAA,EAAA,CAAA,MAAA,AAAAD,4BAAA,AAAA,KAAAxF,qBAAA,AAAAwF,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAmD,yDAAAlD;;;AAAA,AAAA,CAAA,2DAAA,3DAAMkD,sEAEDI;AAFL,AAGE,MAAO,KAAA9H,MAAA;;;AAHT,CAAA,8CAAA,9CAAM0H;;AAAN;AAAA,CAAA,wCAAA,WAAAC,nDAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA","names",["reagent.core/is-client","reagent.impl.util/is-client","var_args","G__41348","reagent.core/create-element","args-arr__4850__auto__","len__4829__auto__","i__4830__auto__","argseq__4851__auto__","cljs.core/IndexedSeq","seq41342","G__41343","cljs.core/first","cljs.core/next","G__41344","G__41345","self__4816__auto__","type","reagent.core.create_element","props","js/module$node_modules$react$index.createElement","child","children","cljs.core.apply","G__41354","reagent.core/as-element","js/Error","form","reagent.impl.protocols/as-element","reagent.impl.template/default-compiler","compiler","reagent.core/adapt-react-class","c","reagent.impl.template/adapt-react-class","G__41358","reagent.core/reactify-component","reagent.core.reactify_component","reagent.impl.component/reactify-component","G__41360","reagent.core/create-class","spec","reagent.impl.component/create-class","reagent.core/current-component","reagent.impl.component/*current-component*","reagent.core/state-atom","this","reagent.impl.component/state-atom","reagent.core/state","cljs.core/deref","reagent.core/replace-state","new-state","cljs.core/reset!","reagent.core/set-state","cljs.core.swap_BANG_","cljs.core/merge","G__41374","reagent.core/force-update","reagent.core.force_update","deep","reagent.ratom/flush!","reagent.impl.util/force-update","reagent.impl.batching/flush-after-render","reagent.core/props","reagent.impl.component/get-props","reagent.core/children","reagent.impl.component/get-children","reagent.core/argv","reagent.impl.component/get-argv","G__41392","reagent.core/class-names","seq41383","G__41387","G__41388","class","reagent.impl.util.class_names","class1","class2","others","reagent.impl.util/class-names","G__41410","reagent.core/merge-props","seq41407","G__41408","G__41409","reagent.impl.util.merge_props","defaults","reagent.impl.util/merge-props","reagent.core/flush","reagent.impl.batching/flush","G__41422","reagent.core/atom","seq41420","G__41421","x","reagent.ratom.atom","rest","reagent.ratom/atom","args__4835__auto__","argseq__4836__auto__","reagent.core/track","seq41434","G__41435","f","args","reagent.ratom/make-track","reagent.core/track!","seq41443","G__41444","reagent.ratom/make-track!","reagent.core/dispose!","reagent.ratom/dispose!","reagent.core/wrap","seq41446","G__41447","G__41448","value","reset-fn","reagent.ratom/make-wrapper","reagent.core/cursor","src","path","reagent.ratom/cursor","reagent.core/rswap!","seq41452","G__41453","G__41454","a","or__4223__auto__","p1__41451#","state","s","temp__5755__auto__","sf","G__41455","reagent.core/next-tick","reagent.impl.batching/do-before-flush","reagent.core/after-render","reagent.impl.batching/do-after-render","reagent.core/partial","seq41466","G__41467","reagent.impl.util/make-partial-fn","reagent.core/create-compiler","opts","reagent.impl.template/create-compiler","reagent.core/set-default-compiler!","reagent.impl.template/set-default-compiler!","reagent.impl.template/default-compiler*","reagent.core/render","seq41481","self__4817__auto__","cljs.core/seq","_"]],"~:used-vars",["^J",["~$reagent.core/next-tick","~$reagent.impl.component/get-children","~$reagent.impl.template/create-compiler","~$reagent.impl.batching/flush","~$reagent.core/dispose!","~$reagent.ratom/make-track!","~$reagent.core/argv","~$reagent.core/render","~$reagent.core/rswap!","~$reagent.core/children","~$reagent.core/flush","~$reagent.core/create-class","~$reagent.core/partial","~$cljs.core/IndexedSeq","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/apply","~$reagent.ratom/flush!","~$reagent.core/reactify-component","~$reagent.core/atom","~$reagent.core/current-component","~$reagent.impl.batching/do-before-flush","~$reagent.core/adapt-react-class","~$js/module$node_modules$react$index.createElement","~$reagent.core/set-default-compiler!","~$reagent.impl.batching/flush-after-render","~$reagent.ratom/make-wrapper","~$reagent.core/wrap","~$reagent.core/after-render","~$reagent.impl.util/make-partial-fn","~$cljs.core/reset!","~$reagent.core/as-element","~$reagent.ratom/dispose!","~$reagent.impl.template/default-compiler*","~$reagent.core/merge-props","~$reagent.core/state-atom","~$reagent.core/create-compiler","~$reagent.impl.template/default-compiler","~$cljs.core/swap!","~$reagent.core/state","~$reagent.core/is-client","~$reagent.core/track!","~$reagent.impl.util/class-names","~$reagent.core/cursor","~$reagent.core/replace-state","~$reagent.impl.component/create-class","~$reagent.impl.template/adapt-react-class","~$reagent.impl.component/get-argv","~$reagent.impl.util/merge-props","~$reagent.impl.util/force-update","~$cljs.core/next","~$reagent.ratom/cursor","~$reagent.impl.component/reactify-component","~$reagent.ratom/make-track","~$reagent.core/track","~$reagent.core/props","~$reagent.core/create-element","~$reagent.impl.template/set-default-compiler!","~$reagent.impl.component/*current-component*","~$reagent.impl.component/get-props","~$reagent.impl.util/is-client","~$reagent.impl.protocols/as-element","~$cljs.core/first","~$reagent.impl.batching/do-after-render","~$reagent.core/force-update","~$reagent.ratom/atom","~$reagent.core/class-names","~$cljs.core/merge","~$js/Error","~$reagent.impl.component/state-atom","~$reagent.core/set-state"]]],"~:cache-keys",["~#cmap",[["^1O","reagent/impl/batching.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^19","^18","^D","^13"]]],["^1O","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","~$goog.dom.HtmlElement"]]],["^1O","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","~$goog.array","~$goog.asserts"]]],["^1O","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1O","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3U"]]],["^1O","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R"]]],["^1O","reagent/impl/util.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18","~$clojure.string","~$clojure.walk","^3T","^D"]]],["^1O","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","reagent/ratom.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18","^13","^D","^1;","~$clojure.set","^3T"]]],["^1O","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["a50d1b69b8256722a912c48dc64a388058f08f3f","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3L",["^ ","^3M",3,"^3N",["^J",[1,2]],"^3O",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1O","shadow/js.js"],["91ebf8590ddc96f434f64b4196f4ef9da4eaf83c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","reagent/impl/template.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[3]],"^3O",["^19","^18","^?","^40","^13","^16","^1;","~$reagent.impl.input","^14","^17","^D","^3T"]]],["^1O","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R"]]],"~:SHADOW-TIMESTAMP",[1625038709000,1625038709000,1624991688000],["^43","node_modules/react/cjs/react.development.js"],["a50d1b69b8256722a912c48dc64a388058f08f3f","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","754b7a48941975257c8955f6d5e511cb3a878737","^3L",["^ ","^3M",2,"^3N",["^J",[0]],"^3O",["^44","~$module$node_modules$object_assign$index"]]],["^1O","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","~$goog.reflect"]]],["^1O","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","~$goog.fs.blob","^3V","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3X","^3Y","^3Z","^3["]]],["^1O","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q","^3R","~$goog.html.SafeUrl","^3Z","^3[","^3U"]]],["^1O","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4<","~$goog.html.SafeStyle","^4>","^3W","~$goog.html.uncheckedconversions","^3Z","^3U"]]],["^1O","reagent/impl/component.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[3]],"^3O",["^19","^18","^3T","^?","^13","^1;","^14","^17","^D"]]],["^1O","clojure/walk.cljs"],["645bb313ccc09b5f580336ae2a5f49212af9e8ea","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18"]]],["^1O","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1O","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q","^3R","~$goog.dom.TagName","~$goog.dom.tags","^4<","^4B","~$goog.html.SafeStyleSheet","^4>","^3W","^4=","^3X","^3Y","~$goog.labs.userAgent.browser","^3T","^3Z","^3[","^3U"]]],["^1O","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3T"]]],["^1O","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q"]]],["^1O","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1O","reagent/impl/protocols.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18"]]],["^1O","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q","^3R","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1O","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^43","node_modules/object-assign/index.js"],["a50d1b69b8256722a912c48dc64a388058f08f3f","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","519ffd5a4c91b67302cc9947b794966d629860cd","^3L",["^ ","^3M",0,"^3N",["^J",[]],"^3O",["^44"]]],["^1O","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",[]]],["^1O","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q","^3T"]]],["^1O","clojure/string.cljs"],["645bb313ccc09b5f580336ae2a5f49212af9e8ea","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18","^4L","~$goog.string.StringBuffer"]]],["^43","node_modules/react/cjs/react.production.min.js"],["a50d1b69b8256722a912c48dc64a388058f08f3f","09b0094a68f7d718c1f13d0c2c5f0ebe2b3a092e","0a81b45abe33f0ad39b726512604018f94261db9","^3L",["^ ","^3M",1,"^3N",["^J",[0]],"^3O",["^44","^49"]]],["^1O","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","~$goog.dom.safe","^4C","^3Z","^3U"]]],["^1O","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3U"]]],["^1O","reagent/core.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[3]],"^3O",["^19","^18","^?","^1:","^16","^13","^1;","^14","^17","^D"]]],["^1O","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Q","^3R","^4@","~$goog.math"]]],["^1O","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","^4A","^4<","^4B","^4H","^4>","^3W","^3Z","^3U","^3X"]]],["^1O","reagent/impl/input.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18","^16","^1;","^14"]]],["^1O","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19"]]],["^1O","cljs/core.cljs"],["645bb313ccc09b5f580336ae2a5f49212af9e8ea","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","~$goog.math.Long","~$goog.math.Integer","^4L","^3T","^3Q","~$goog.Uri","^4R"]]],["^1O","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Z","^3[","^4=","^3R"]]],["^1O","reagent/debug.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18"]]],["^1O","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3Z","^4B","^3[","^3Q","^3T","^3R","^3U"]]],["^1O","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^4:"]]],["^1O","clojure/set.cljs"],["645bb313ccc09b5f580336ae2a5f49212af9e8ea","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^18"]]],["^1O","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","^4L"]]],["^1O","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3L",["^ ","^3M",null,"^3N",["^J",[]],"^3O",["^19","^3R","^3["]]]]],"~:clj-info",["^ ","jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1625038703000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/tagged_literals.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/interop.clj",1625038710000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer/impl.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1625038703000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer/passes/and_or.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1625038710000,"jar:file:/Users/mihai/.m2/repository/org/clojure/data.json/2.3.1/data.json-2.3.1.jar!/clojure/data/json.clj",1625038702000,"jar:file:/Users/mihai/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/inspect.clj",1625038702000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1625038703000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/source_map.clj",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1625038703000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1625038703000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/externs.clj",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/core.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader.clj",1625038702000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/env.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/util.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/compiler.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/core.clj",1625038710000,"jar:file:/Users/mihai/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/reader_types.clj",1625038702000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/source_map/base64.clj",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/js_deps.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/instant.clj",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/source_map/base64_vlq.clj",1624991688000,"jar:file:/Users/mihai/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/debug.clj",1625038710000,"jar:file:/Users/mihai/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/ratom.clj",1625038710000,"jar:file:/Users/mihai/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/impl/errors.clj",1625038702000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1625038703000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojurescript/1.10.866/clojurescript-1.10.866.jar!/cljs/analyzer/passes.cljc",1624991688000,"jar:file:/Users/mihai/.m2/repository/org/clojure/tools.reader/1.3.5/tools.reader-1.3.5.jar!/clojure/tools/reader/default_data_readers.clj",1625038702000,"jar:file:/Users/mihai/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1625038703000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/core.cljs","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","^C","^D","^E","^D","^F","^D","^G","^D","^H","^D"],"^I",["^J",["^K","^L","^M"]],"^N",["^ ","^O",["^ ","^P",["^Q",[["^R","~$&","^S"]]],"^T","Bind variables as with let, except that when used in a component\n  the bindings are only evaluated once. Also takes an optional finally\n  clause at the end, that is executed when the component is\n  destroyed.","^7",4,"^8",1,"^6","reagent/core.clj","^U","^V","^W","^X","^Y",true],"^Z",["^ ","^P",["^Q",[["~$&","^S"]]],"^T","Creates Reaction from the body, returns a derefable\n  containing the result of the body. If the body derefs\n  reactive values (Reagent atons, track, etc), the body\n  will run again and the value of the Reaction is updated.\n\n  New Reaction is created everytime reaction is called,\n  so caller needs to take care that new reaction isn't created\n  e.g. every component render, by using with-let, form-2 or form-3\n  components or other solutions. Consider using reagent.core/track,\n  for function that caches the derafable value, and can thus be safely\n  used in e.g. render function safely.","^7",12,"^8",1,"^6","reagent/core.clj","^U","^[","^W","^X","^Y",true]],"~:shadow/js-access-properties",["^J",["createElement"]],"^U","^X","^11",null,"^12",["^ ","^13","^13","^14","^14","~$p","^14","^15","^16","^17","^17","^>","^?","^18","^18","^?","^?","^19","^19","^1:","^1:","^1;","^1;","^16","^16","^1<","^13","^1=","^1:","^1>","^17","^1?","^D","^1@","^1;","^D","^D"],"^1A",["^J",["^1B","^1C"]],"~:shadow/js-access-global",["^J",["Error"]],"^1D",null,"~:defs",["^ ","~$class-names",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/core.cljs","^7",179,"^8",7,"^9",179,"^:",18,"^P",["^Q",["~$quote",["^Q",[[],["~$class"],["~$class1","~$class2"],["^5V","^5W","~$&","~$others"]]]]],"^T","Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^5U"],["^5V","^5W"]],"^P",["^Q",[[],["^5U"],["^5V","^5W"],["^5V","^5W","~$&","^5X"]]],"~:arglists-meta",["^Q",[null,null,null,null]]]],"^U","^3E","^6","reagent/core.cljs","^:",18,"^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[[],["^5U"],["^5V","^5W"]],"^P",["^Q",[[],["^5U"],["^5V","^5W"],["^5V","^5W","~$&","^5X"]]],"^62",["^Q",[null,null,null,null]]],"^61",[[],["^5U"],["^5V","^5W"]],"~:protocol-impl",null,"^5[",2,"^62",["^Q",[null,null,null,null]],"^8",1,"^5Z",true,"~:methods",[["^ ","^5[",0,"^5Z",false,"~:tag","~$clj-nil"],["^ ","^5[",1,"^5Z",false,"^65",["^J",[null,"~$string","^66"]]],["^ ","^5[",2,"^5Z",false,"^65",["^J",[null,"^67","^66"]]],["^ ","^5[",2,"^5Z",true,"^65","~$any"]],"^7",179,"^9",179,"^60",2,"~:fn-var",true,"^P",["^Q",[[],["^5U"],["^5V","^5W"],["^5V","^5W","~$&","^5X"]]],"^T","Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types"],"~$after-render",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",340,"^8",7,"^9",340,"^:",19,"^P",["^Q",["^5T",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur)."],"^U","^2K","^6","reagent/core.cljs","^:",19,"^61",["^Q",[["~$f"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",340,"~:ret-tag","^68","^9",340,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur)."],"~$current-component",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",114,"^8",7,"^9",114,"^:",24,"^P",["^Q",["^5T",["^Q",[[]]]]],"^T","Returns the current React component (a.k.a `this`) in a component\n  function."],"^U","^2C","^6","reagent/core.cljs","^:",24,"^61",["^Q",[[]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",114,"^6;","^68","^9",114,"^60",0,"^69",true,"^P",["^Q",["^5T",["^Q",[[]]]]],"^T","Returns the current React component (a.k.a `this`) in a component\n  function."],"~$adapt-react-class",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",52,"^8",7,"^9",52,"^:",24,"^P",["^Q",["^5T",["^Q",[["~$c"]]]]],"^T","Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms."],"^U","^2E","^6","reagent/core.cljs","^:",24,"^61",["^Q",[["~$c"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",52,"^6;","~$reagent.impl.template/NativeWrapper","^9",52,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["~$c"]]]]],"^T","Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms."],"^K",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",211,"^8",7,"^9",211,"^:",11,"^P",["^Q",["^5T",["^Q",[["~$x"],["~$x","~$&","~$rest"]]]]],"^T","Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered.","^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["~$x"]],"^P",["^Q",[["~$x"],["~$x","~$&","^6?"]]],"^62",["^Q",[null,null]]]],"^U","^2B","^6","reagent/core.cljs","^:",11,"^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["~$x"]],"^P",["^Q",[["~$x"],["~$x","~$&","^6?"]]],"^62",["^Q",[null,null]]],"^61",[["~$x"]],"^63",null,"^5[",1,"^62",["^Q",[null,null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",1,"^5Z",false,"^65","~$reagent.ratom/RAtom"],["^ ","^5[",1,"^5Z",true,"^65","^68"]],"^7",211,"^9",211,"^60",1,"^69",true,"^P",["^Q",[["~$x"],["~$x","~$&","^6?"]]],"^T","Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered."],"~$merge-props",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",191,"^8",7,"^9",191,"^:",18,"^P",["^Q",["^5T",["^Q",[[],["~$defaults"],["^6B","~$props"],["^6B","^6C","~$&","^5X"]]]]],"^T","Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done.","^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[[],["^6B"],["^6B","^6C"]],"^P",["^Q",[[],["^6B"],["^6B","^6C"],["^6B","^6C","~$&","^5X"]]],"^62",["^Q",[null,null,null,null]]]],"^U","^2Q","^6","reagent/core.cljs","^:",18,"^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[[],["^6B"],["^6B","^6C"]],"^P",["^Q",[[],["^6B"],["^6B","^6C"],["^6B","^6C","~$&","^5X"]]],"^62",["^Q",[null,null,null,null]]],"^61",[[],["^6B"],["^6B","^6C"]],"^63",null,"^5[",2,"^62",["^Q",[null,null,null,null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",0,"^5Z",false,"^65","^66"],["^ ","^5[",1,"^5Z",false,"^65",["^J",[null,"~$clj","^68"]]],["^ ","^5[",2,"^5Z",false,"^65",["^J",[null,"^6D","^68","^66"]]],["^ ","^5[",2,"^5Z",true,"^65","^68"]],"^7",191,"^9",191,"^60",2,"^69",true,"^P",["^Q",[[],["^6B"],["^6B","^6C"],["^6B","^6C","~$&","^5X"]]],"^T","Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done."],"~$as-element",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^P",["^Q",["^5T",["^Q",[["~$form"],["^6F","~$compiler"]]]]],"^T","Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector.","^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["^6F"],["^6F","^6G"]],"^P",["^Q",[["^6F"],["^6F","^6G"]]],"^62",["^Q",[null,null]]]],"^U","^2N","^6","reagent/core.cljs","^:",17,"^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["^6F"],["^6F","^6G"]],"^P",["^Q",[["^6F"],["^6F","^6G"]]],"^62",["^Q",[null,null]]],"^61",[["^6F"],["^6F","^6G"]],"^63",null,"^5[",2,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",1,"^5Z",false,"^65","^68"],["^ ","^5[",2,"^5Z",false,"^65","^68"]],"^7",46,"^9",46,"^60",2,"^69",true,"^P",["^Q",[["^6F"],["^6F","^6G"]]],"^T","Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector."],"~$rswap!",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",311,"^8",7,"^9",311,"^:",13,"^P",["^Q",["^5T",["^Q",[["~$a","~$f","~$&","~$args"]]]]],"^T","Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil.","^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[["^Q",["~$a","~$f","^6I"]]],"^P",["^Q",[["~$a","~$f","~$&","^6I"]]],"^62",["^Q",[null]]]],"^U","^27","^6","reagent/core.cljs","^:",13,"^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[["^Q",["~$a","~$f","^6I"]]],"^P",["^Q",[["~$a","~$f","~$&","^6I"]]],"^62",["^Q",[null]]],"^61",[["^Q",["~$a","~$f","^6I"]]],"^63",null,"^5[",2,"^62",["^Q",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",2,"^5Z",true,"^65","^66"]],"^7",311,"^6;","^68","^9",311,"^60",2,"^69",true,"^P",["^Q",[["~$a","~$f","~$&","^6I"]]],"^T","Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil."],"~$next-tick",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",333,"^8",7,"^9",333,"^:",16,"^P",["^Q",["^5T",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"^U","^1[","^6","reagent/core.cljs","^:",16,"^61",["^Q",[["~$f"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",333,"^6;","^68","^9",333,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"~$track",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",218,"^8",7,"^9",218,"^:",12,"^P",["^Q",["^5T",["^Q",[["~$f","~$&","^6I"]]]]],"^T","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.","^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["^Q",["~$f","^6I"]]],"^P",["^Q",[["~$f","~$&","^6I"]]],"^62",["^Q",[null]]]],"^U","^39","^6","reagent/core.cljs","^:",12,"^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["^Q",["~$f","^6I"]]],"^P",["^Q",[["~$f","~$&","^6I"]]],"^62",["^Q",[null]]],"^61",[["^Q",["~$f","^6I"]]],"^63",null,"^5[",1,"^62",["^Q",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",1,"^5Z",true,"^65","~$reagent.ratom/Track"]],"^7",218,"^6;","^68","^9",218,"^60",1,"^69",true,"^P",["^Q",[["~$f","~$&","^6I"]]],"^T","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref."],"^6C",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",161,"^8",7,"^9",161,"^:",12,"^P",["^Q",["^5T",["^Q",[["~$this"]]]]],"^T","Returns the props passed to a component."],"^U","^3:","^6","reagent/core.cljs","^:",12,"^61",["^Q",[["^6M"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",161,"^6;",["^J",[null,"^68","^66"]],"^9",161,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the props passed to a component."],"~$dispose!",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",242,"^8",7,"^9",242,"^:",15,"^P",["^Q",["^5T",["^Q",[["~$x"]]]]],"^T","Stop the result of track! from updating."],"^U","^23","^6","reagent/core.cljs","^:",15,"^61",["^Q",[["~$x"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",242,"^6;","^68","^9",242,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["~$x"]]]]],"^T","Stop the result of track! from updating."],"~$state-atom",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",120,"^8",7,"^9",120,"^:",17,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns an atom containing a components state."],"^U","^2R","^6","reagent/core.cljs","^:",17,"^61",["^Q",[["^6M"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",120,"^6;",["^J",[null,"^68"]],"^9",120,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns an atom containing a components state."],"^L",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",201,"^8",7,"^9",201,"^:",12,"^P",["^Q",["^5T",["^Q",[[]]]]],"^T","Render dirty components immediately.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there."],"^U","^29","^6","reagent/core.cljs","^:",12,"^61",["^Q",[[]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",201,"^6;","^68","^9",201,"^60",0,"^69",true,"^P",["^Q",["^5T",["^Q",[[]]]]],"^T","Render dirty components immediately.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there."],"~$children",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",167,"^8",7,"^9",167,"^:",15,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the children passed to a component."],"^U","^28","^6","reagent/core.cljs","^:",15,"^61",["^Q",[["^6M"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",167,"^6;",["^J",[null,"^6D","^68","^66"]],"^9",167,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the children passed to a component."],"~$wrap",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",247,"^8",7,"^9",247,"^:",11,"^P",["^Q",["^5T",["^Q",[["~$value","~$reset-fn","~$&","^6I"]]]]],"^T","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components.","^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[["^Q",["^6R","^6S","^6I"]]],"^P",["^Q",[["^6R","^6S","~$&","^6I"]]],"^62",["^Q",[null]]]],"^U","^2J","^6","reagent/core.cljs","^:",11,"^5Y",["^ ","^5Z",true,"^5[",2,"^60",2,"^61",[["^Q",["^6R","^6S","^6I"]]],"^P",["^Q",[["^6R","^6S","~$&","^6I"]]],"^62",["^Q",[null]]],"^61",[["^Q",["^6R","^6S","^6I"]]],"^63",null,"^5[",2,"^62",["^Q",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",2,"^5Z",true,"^65","~$reagent.ratom/Wrapper"]],"^7",247,"^6;","^68","^9",247,"^60",2,"^69",true,"^P",["^Q",[["^6R","^6S","~$&","^6I"]]],"^T","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components."],"~$reactify-component",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",59,"^8",7,"^9",59,"^:",25,"^P",["^Q",["^5T",["^Q",[["~$c"],["~$c","^6G"]]]]],"^T","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.","^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["~$c"],["~$c","^6G"]],"^P",["^Q",[["~$c"],["~$c","^6G"]]],"^62",["^Q",[null,null]]]],"^U","^2A","^6","reagent/core.cljs","^:",25,"^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["~$c"],["~$c","^6G"]],"^P",["^Q",[["~$c"],["~$c","^6G"]]],"^62",["^Q",[null,null]]],"^61",[["~$c"],["~$c","^6G"]],"^63",null,"^5[",2,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",1,"^5Z",false,"^65","^68"],["^ ","^5[",2,"^5Z",false,"^65",["^J",[null,"^68"]]]],"^7",59,"^9",59,"^60",2,"^69",true,"^P",["^Q",[["~$c"],["~$c","^6G"]]],"^T","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"~$set-default-compiler!",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",360,"^8",7,"^9",360,"^:",28,"^P",["^Q",["^5T",["^Q",[["^6G"]]]]],"^T","Globally sets the Compiler object used by `render`, `as-element` and other\n  calls by default, when no `compiler` parameter is provided.\n\n  Use `nil` value to restore the original default compiler."],"^U","^2G","^6","reagent/core.cljs","^:",28,"^61",["^Q",[["^6G"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",360,"^6;","^68","^9",360,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6G"]]]]],"^T","Globally sets the Compiler object used by `render`, `as-element` and other\n  calls by default, when no `compiler` parameter is provided.\n\n  Use `nil` value to restore the original default compiler."],"~$cursor",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",272,"^8",7,"^9",272,"^:",13,"^P",["^Q",["^5T",["^Q",[["~$src","~$path"]]]]],"^T","Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument – the path passed to\n  cursor – when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch."],"^U","^2Z","^6","reagent/core.cljs","^:",13,"^61",["^Q",[["^6X","^6Y"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",272,"^6;","~$reagent.ratom/RCursor","^9",272,"^60",2,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6X","^6Y"]]]]],"^T","Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument – the path passed to\n  cursor – when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch."],"~$state",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",126,"^8",7,"^9",126,"^:",12,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`"],"^U","^2V","^6","reagent/core.cljs","^:",12,"^61",["^Q",[["^6M"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",126,"^6;","^68","^9",126,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`"],"~$create-compiler",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",353,"^8",7,"^9",353,"^:",22,"^P",["^Q",["^5T",["^Q",[["~$opts"]]]]],"^T","Creates Compiler object with given `opts`,\n  this can be passed to `render`, `as-element` and other functions to control\n  how they turn the Reagent-style Hiccup into React components and elements."],"^U","^2S","^6","reagent/core.cljs","^:",22,"^61",["^Q",[["^71"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",353,"^6;","~$reagent.impl.template/t_reagent$impl$template41250","^9",353,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^71"]]]]],"^T","Creates Compiler object with given `opts`,\n  this can be passed to `render`, `as-element` and other functions to control\n  how they turn the Reagent-style Hiccup into React components and elements."],"~$track!",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",234,"^8",7,"^9",234,"^:",13,"^P",["^Q",["^5T",["^Q",[["~$f","~$&","^6I"]]]]],"^T","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.","^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["^Q",["~$f","^6I"]]],"^P",["^Q",[["~$f","~$&","^6I"]]],"^62",["^Q",[null]]]],"^U","^2X","^6","reagent/core.cljs","^:",13,"^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["^Q",["~$f","^6I"]]],"^P",["^Q",[["~$f","~$&","^6I"]]],"^62",["^Q",[null]]],"^61",[["^Q",["~$f","^6I"]]],"^63",null,"^5[",1,"^62",["^Q",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",1,"^5Z",true,"^65","^68"]],"^7",234,"^6;","^68","^9",234,"^60",1,"^69",true,"^P",["^Q",[["~$f","~$&","^6I"]]],"^T","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!."],"~$is-client",["^ ","^U","^2W","^6","reagent/core.cljs","^7",15,"^8",1,"^9",15,"^:",15,"^5",["^ ","^6","reagent/core.cljs","^7",15,"^8",6,"^9",15,"^:",15],"^65","~$boolean"],"~$replace-state",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",133,"^8",7,"^9",133,"^:",20,"^P",["^Q",["^5T",["^Q",[["^6M","~$new-state"]]]]],"^T","Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`"],"^U","^2[","^6","reagent/core.cljs","^:",20,"^61",["^Q",[["^6M","^77"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",133,"^6;",["^J",[null,"^68"]],"^9",133,"^60",2,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M","^77"]]]]],"^T","Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`"],"^M",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",348,"^8",7,"^9",348,"^:",14,"^P",["^Q",["^5T",["^Q",[["~$f","~$&","^6I"]]]]],"^T","Works just like clojure.core/partial, but the result can be compared with =","^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["^Q",["~$f","^6I"]]],"^P",["^Q",[["~$f","~$&","^6I"]]],"^62",["^Q",[null]]]],"^U","^2;","^6","reagent/core.cljs","^:",14,"^5Y",["^ ","^5Z",true,"^5[",1,"^60",1,"^61",[["^Q",["~$f","^6I"]]],"^P",["^Q",[["~$f","~$&","^6I"]]],"^62",["^Q",[null]]],"^61",[["^Q",["~$f","^6I"]]],"^63",null,"^5[",1,"^62",["^Q",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",1,"^5Z",true,"^65","~$reagent.impl.util/PartialFn"]],"^7",348,"^6;","^68","^9",348,"^60",1,"^69",true,"^P",["^Q",[["~$f","~$&","^6I"]]],"^T","Works just like clojure.core/partial, but the result can be compared with ="],"~$set-state",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",141,"^8",7,"^9",141,"^:",16,"^P",["^Q",["^5T",["^Q",[["^6M","^77"]]]]],"^T","Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`"],"^U","^3I","^6","reagent/core.cljs","^:",16,"^61",["^Q",[["^6M","^77"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",141,"^6;",["^J",[null,"^68"]],"^9",141,"^60",2,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M","^77"]]]]],"^T","Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`"],"~$argv",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",173,"^8",7,"^9",173,"^:",11,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the entire Hiccup form passed to the component."],"^U","^25","^6","reagent/core.cljs","^:",11,"^61",["^Q",[["^6M"]]],"^63",null,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^7",173,"^6;",["^J",["~$cljs.core/IVector","^68"]],"^9",173,"^60",1,"^69",true,"^P",["^Q",["^5T",["^Q",[["^6M"]]]]],"^T","Returns the entire Hiccup form passed to the component."],"~$render",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",370,"^8",7,"^9",370,"^:",13,"^P",["^Q",["^5T",["^Q",[["~$&","~$_"]]]]],"~:deprecated","0.10.0","^5Y",["^ ","^5Z",true,"^5[",0,"^60",0,"^61",[["^Q",["~$_"]]],"^P",["^Q",[["~$&","~$_"]]],"^62",["^Q",[null]]]],"^U","^26","^6","reagent/core.cljs","^:",13,"^5Y",["^ ","^5Z",true,"^5[",0,"^60",0,"^61",[["^Q",["~$_"]]],"^P",["^Q",[["~$&","~$_"]]],"^62",["^Q",[null]]],"^61",[["^Q",["~$_"]]],"^63",null,"^5[",0,"^62",["^Q",[null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",0,"^5Z",true,"^65","~$ignore"]],"^7",370,"^7=","0.10.0","^6;","^68","^9",370,"^60",0,"^69",true,"^P",["^Q",[["~$&","~$_"]]]],"~$force-update",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",149,"^8",7,"^9",149,"^:",19,"^P",["^Q",["^5T",["^Q",[["^6M"],["^6M","~$deep"]]]]],"^T","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.","^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["^6M"],["^6M","^7@"]],"^P",["^Q",[["^6M"],["^6M","^7@"]]],"^62",["^Q",[null,null]]]],"^U","^3C","^6","reagent/core.cljs","^:",19,"^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["^6M"],["^6M","^7@"]],"^P",["^Q",[["^6M"],["^6M","^7@"]]],"^62",["^Q",[null,null]]],"^61",[["^6M"],["^6M","^7@"]],"^63",null,"^5[",2,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",1,"^5Z",false,"^65","^68"],["^ ","^5[",2,"^5Z",false,"^65","^68"]],"^7",149,"^9",149,"^60",2,"^69",true,"^P",["^Q",[["^6M"],["^6M","^7@"]]],"^T","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed."],"~$create-class",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",68,"^8",7,"^9",68,"^:",19,"^P",["^Q",["^5T",["^Q",[["~$spec"],["^7B","^6G"]]]]],"^T","Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics.","^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["^7B"],["^7B","^6G"]],"^P",["^Q",[["^7B"],["^7B","^6G"]]],"^62",["^Q",[null,null]]]],"^U","^2:","^6","reagent/core.cljs","^:",19,"^5Y",["^ ","^5Z",false,"^5[",2,"^60",2,"^61",[["^7B"],["^7B","^6G"]],"^P",["^Q",[["^7B"],["^7B","^6G"]]],"^62",["^Q",[null,null]]],"^61",[["^7B"],["^7B","^6G"]],"^63",null,"^5[",2,"^62",["^Q",[null,null]],"^8",1,"^5Z",false,"^64",[["^ ","^5[",1,"^5Z",false,"^65","~$function"],["^ ","^5[",2,"^5Z",false,"^65","^7C"]],"^7",68,"^9",68,"^60",2,"^69",true,"^P",["^Q",[["^7B"],["^7B","^6G"]]],"^T","Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics."],"~$create-element",["^ ","^5S",null,"^5",["^ ","^6","reagent/core.cljs","^7",17,"^8",7,"^9",17,"^:",21,"^P",["^Q",["^5T",["^Q",[["~$type"],["^7E","^6C"],["^7E","^6C","~$child"],["^7E","^6C","^7F","~$&","^6P"]]]]],"^T","Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \"div\" #js{:className \"foo\"}\n    \"Hi \" (r/as-element [:strong \"world!\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \"Hi\" [:strong \"world!\"]]\n  ```","^5Y",["^ ","^5Z",true,"^5[",3,"^60",3,"^61",[["^7E"],["^7E","^6C"],["^7E","^6C","^7F"]],"^P",["^Q",[["^7E"],["^7E","^6C"],["^7E","^6C","^7F"],["^7E","^6C","^7F","~$&","^6P"]]],"^62",["^Q",[null,null,null,null]]]],"^U","^3;","^6","reagent/core.cljs","^:",21,"^5Y",["^ ","^5Z",true,"^5[",3,"^60",3,"^61",[["^7E"],["^7E","^6C"],["^7E","^6C","^7F"]],"^P",["^Q",[["^7E"],["^7E","^6C"],["^7E","^6C","^7F"],["^7E","^6C","^7F","~$&","^6P"]]],"^62",["^Q",[null,null,null,null]]],"^61",[["^7E"],["^7E","^6C"],["^7E","^6C","^7F"]],"^63",null,"^5[",3,"^62",["^Q",[null,null,null,null]],"^8",1,"^5Z",true,"^64",[["^ ","^5[",1,"^5Z",false,"^65","^68"],["^ ","^5[",2,"^5Z",false,"^65","~$js"],["^ ","^5[",3,"^5Z",false,"^65","^7G"],["^ ","^5[",3,"^5Z",true,"^65","^68"]],"^7",17,"^9",17,"^60",3,"^69",true,"^P",["^Q",[["^7E"],["^7E","^6C"],["^7E","^6C","^7F"],["^7E","^6C","^7F","~$&","^6P"]]],"^T","Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \"div\" #js{:className \"foo\"}\n    \"Hi \" (r/as-element [:strong \"world!\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \"Hi\" [:strong \"world!\"]]\n  ```"]],"^1C",["^ ","^X","^X","^D","^D","^1?","^D","^18","^18","^17","^17","^1>","^17"],"^1K",["^ ","^1C",["^J",[]],"^1B",["^J",[]]],"^1L",["^ "],"^1M",["^19","^18","^?","^1:","^16","^13","^1;","^14","^17","^D"]],"^W","^X","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^3K",[["^7J","~:static-fns"],true,["^7J","~:shadow-tweaks"],null,["^7J","~:source-map-inline"],null,["^7J","~:elide-asserts"],true,["^7J","~:optimize-constants"],null,["^7J","^1R"],null,["^7J","~:external-config"],null,["^7J","~:tooling-config"],null,["^7J","~:emit-constants"],null,["^7J","~:load-tests"],false,["^7J","~:form-size-threshold"],null,["^7J","~:data-readers"],null,["^7J","~:infer-externs"],"~:auto",["^7J","^1T"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^7J","~:fn-invoke-direct"],null,["^7J","~:source-map"],null]]]